/**
 * @fileoverview gRPC-Web generated client stub for ros2_ws.aruku.proto
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: aruku.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.ros2_ws = {};
proto.ros2_ws.aruku = {};
proto.ros2_ws.aruku.proto = require('./aruku_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ros2_ws.aruku.proto.GetConfigClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ros2_ws.aruku.proto.GetConfigPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ros2_ws.aruku.proto.Empty,
 *   !proto.ros2_ws.aruku.proto.ConfigWalking>}
 */
const methodDescriptor_GetConfig_GetConfig = new grpc.web.MethodDescriptor(
  '/ros2_ws.aruku.proto.GetConfig/GetConfig',
  grpc.web.MethodType.UNARY,
  proto.ros2_ws.aruku.proto.Empty,
  proto.ros2_ws.aruku.proto.ConfigWalking,
  /**
   * @param {!proto.ros2_ws.aruku.proto.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ros2_ws.aruku.proto.ConfigWalking.deserializeBinary
);


/**
 * @param {!proto.ros2_ws.aruku.proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ros2_ws.aruku.proto.ConfigWalking)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ros2_ws.aruku.proto.ConfigWalking>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ros2_ws.aruku.proto.GetConfigClient.prototype.getConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ros2_ws.aruku.proto.GetConfig/GetConfig',
      request,
      metadata || {},
      methodDescriptor_GetConfig_GetConfig,
      callback);
};


/**
 * @param {!proto.ros2_ws.aruku.proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ros2_ws.aruku.proto.ConfigWalking>}
 *     Promise that resolves to the response
 */
proto.ros2_ws.aruku.proto.GetConfigPromiseClient.prototype.getConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ros2_ws.aruku.proto.GetConfig/GetConfig',
      request,
      metadata || {},
      methodDescriptor_GetConfig_GetConfig);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ros2_ws.aruku.proto.SaveConfigClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ros2_ws.aruku.proto.SaveConfigPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ros2_ws.aruku.proto.ConfigWalking,
 *   !proto.ros2_ws.aruku.proto.Empty>}
 */
const methodDescriptor_SaveConfig_SaveConfig = new grpc.web.MethodDescriptor(
  '/ros2_ws.aruku.proto.SaveConfig/SaveConfig',
  grpc.web.MethodType.UNARY,
  proto.ros2_ws.aruku.proto.ConfigWalking,
  proto.ros2_ws.aruku.proto.Empty,
  /**
   * @param {!proto.ros2_ws.aruku.proto.ConfigWalking} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ros2_ws.aruku.proto.Empty.deserializeBinary
);


/**
 * @param {!proto.ros2_ws.aruku.proto.ConfigWalking} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ros2_ws.aruku.proto.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ros2_ws.aruku.proto.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ros2_ws.aruku.proto.SaveConfigClient.prototype.saveConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ros2_ws.aruku.proto.SaveConfig/SaveConfig',
      request,
      metadata || {},
      methodDescriptor_SaveConfig_SaveConfig,
      callback);
};


/**
 * @param {!proto.ros2_ws.aruku.proto.ConfigWalking} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ros2_ws.aruku.proto.Empty>}
 *     Promise that resolves to the response
 */
proto.ros2_ws.aruku.proto.SaveConfigPromiseClient.prototype.saveConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ros2_ws.aruku.proto.SaveConfig/SaveConfig',
      request,
      metadata || {},
      methodDescriptor_SaveConfig_SaveConfig);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ros2_ws.aruku.proto.SetConfigClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ros2_ws.aruku.proto.SetConfigPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ros2_ws.aruku.proto.SetWalking,
 *   !proto.ros2_ws.aruku.proto.Empty>}
 */
const methodDescriptor_SetConfig_SetConfig = new grpc.web.MethodDescriptor(
  '/ros2_ws.aruku.proto.SetConfig/SetConfig',
  grpc.web.MethodType.UNARY,
  proto.ros2_ws.aruku.proto.SetWalking,
  proto.ros2_ws.aruku.proto.Empty,
  /**
   * @param {!proto.ros2_ws.aruku.proto.SetWalking} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ros2_ws.aruku.proto.Empty.deserializeBinary
);


/**
 * @param {!proto.ros2_ws.aruku.proto.SetWalking} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ros2_ws.aruku.proto.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ros2_ws.aruku.proto.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ros2_ws.aruku.proto.SetConfigClient.prototype.setConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ros2_ws.aruku.proto.SetConfig/SetConfig',
      request,
      metadata || {},
      methodDescriptor_SetConfig_SetConfig,
      callback);
};


/**
 * @param {!proto.ros2_ws.aruku.proto.SetWalking} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ros2_ws.aruku.proto.Empty>}
 *     Promise that resolves to the response
 */
proto.ros2_ws.aruku.proto.SetConfigPromiseClient.prototype.setConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ros2_ws.aruku.proto.SetConfig/SetConfig',
      request,
      metadata || {},
      methodDescriptor_SetConfig_SetConfig);
};


module.exports = proto.ros2_ws.aruku.proto;

